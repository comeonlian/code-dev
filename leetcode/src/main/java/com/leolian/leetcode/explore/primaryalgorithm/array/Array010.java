package com.leolian.leetcode.explore.primaryalgorithm.array;

import java.util.HashSet;
import java.util.Set;

/**
 * LC 有效的数独:
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 * <p>
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 * <p>
 * 示例 1:
 * 输入:
 * [
 * ["5","3",".",".","7",".",".",".","."],
 * ["6",".",".","1","9","5",".",".","."],
 * [".","9","8",".",".",".",".","6","."],
 * ["8",".",".",".","6",".",".",".","3"],
 * ["4",".",".","8",".","3",".",".","1"],
 * ["7",".",".",".","2",".",".",".","6"],
 * [".","6",".",".",".",".","2","8","."],
 * [".",".",".","4","1","9",".",".","5"],
 * [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 * <p>
 * 示例 2:
 * 输入:
 * [
 *   ["8","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * <p>
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 * 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 说明:
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 */
public class Array010 {

    public static void main(String[] args) {
        Array010 array010 = new Array010();

        char[][] board = new char[][]{
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
//                {'8', '3', '.', '.', '7', '.', '.', '.', '.'},
//                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
//                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
//                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
//                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
//                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
//                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
//                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
//                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
//                {'.', '.', '4', '.', '.', '.', '6', '3', '.'},
//                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
//                {'5', '.', '.', '.', '.', '.', '.', '9', '.'},
//                {'.', '.', '.', '5', '6', '.', '.', '.', '.'},
//                {'4', '.', '3', '.', '.', '.', '.', '.', '1'},
//                {'.', '.', '.', '7', '.', '.', '.', '.', '.'},
//                {'.', '.', '.', '5', '.', '.', '.', '.', '.'},
//                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
//                {'.', '.', '.', '.', '.', '.', '.', '.', '.'}
        };
        boolean validSudoku = array010.isValidSudoku(board);
        System.out.println("Result : " + validSudoku);
    }

    /**
     * 注意，题目说明了，仅判断数独的有效性，并不判断数独的可解性，所以我们只需根据三个条件简单遍历，判断每一竖列，每一横列，每一3x3不会出现重复元素即可。
     * 其中横列，竖列的判断都很容易，2个嵌套循环的事情。
     * 而3x3的块，我们则需要找出每个块的初始坐标点，有以下方式：
     * x_start = (i * 3) % 9
     * y_start = i / 3 * 3     （这里可能有点tricky，数学来说除三乘三是就等于i，但是这里的除是c语言中的整数除，除出来的结果为整数。）
     * 注意这里的i为第i个3x3小块。
     *
     * @param board
     * @return
     */
    public boolean isValidSudoku(char[][] board) {
        for (int i = 0; i < 9; i++) {
            Set<Character> rowSet = new HashSet<>();
            for (int j = 0; j < 9; j++) {
                char val = board[i][j];
                if (val == '.') {
                    continue;
                }
                if (rowSet.contains(val)) {
                    return false;
                } else {
                    rowSet.add(val);
                }
            }
        }
        for (int i = 0; i < 9; i++) {
            Set<Character> colSet = new HashSet<>();
            for (int j = 0; j < 9; j++) {
                char val = board[j][i];
                if (val == '.') {
                    continue;
                }
                if (colSet.contains(val)) {
                    return false;
                } else {
                    colSet.add(val);
                }
            }
        }
        int[] index = {0, 3, 6};
        for (int rowIndex : index) {
            for (int colIndex : index) {
                Set<Character> set = new HashSet<>();
                int row = rowIndex;
                for (int i = 0; i < 3; i++, row++) {
                    int col = colIndex;
                    for (int j = 0; j < 3; j++, col++) {
                        char val = board[row][col];
                        if (val == '.') {
                            continue;
                        }
                        if (set.contains(val)) {
                            return false;
                        } else {
                            set.add(val);
                        }
                    }
                }
            }
        }
        return true;
    }
    /*
    执行结果：通过
    执行用时：3 ms, 在所有 Java 提交中击败了55.13%的用户
    内存消耗：38.5 MB, 在所有 Java 提交中击败了57.47%的用户
     */

}
